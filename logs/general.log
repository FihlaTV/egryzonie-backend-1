[2017-09-26 10:26:12.833] [INFO] general - staging
[2017-09-26 10:26:12.845] [DEBUG] general - { env: 'staging' }
[2017-09-26 10:28:17.291] [INFO] general - staging
[2017-09-26 10:28:17.303] [DEBUG] general - { env: 'staging' }
[2017-09-26 10:31:34.890] [INFO] general - staging
[2017-09-26 10:31:34.901] [DEBUG] general - { env: 'staging' }
[2017-09-26 10:31:55.550] [INFO] general - staging
[2017-09-26 10:31:55.765] [DEBUG] general - { sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: 'pgsql19.mydevil.net',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'p1050_eg_staging',
        password: 'A748cf4213',
        database: 'p1050_eg_staging' },
     config: 
      { database: 'p1050_eg_staging',
        username: 'p1050_eg_staging',
        password: 'A748cf4213',
        host: 'pgsql19.mydevil.net',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: {},
     modelManager: ModelManager { models: [], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: {},
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 10:52:34.226] [INFO] general - staging
[2017-09-26 10:52:34.430] [DEBUG] general - { sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: 'pgsql19.mydevil.net',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'p1050_eg_staging',
        password: 'A748cf4213',
        database: 'p1050_eg_staging' },
     config: 
      { database: 'p1050_eg_staging',
        username: 'p1050_eg_staging',
        password: 'A748cf4213',
        host: 'pgsql19.mydevil.net',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: {},
     modelManager: ModelManager { models: [], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: {},
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 10:58:39.563] [INFO] general - development
[2017-09-26 10:58:43.087] [DEBUG] general - { sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound ],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: {},
     modelManager: ModelManager { models: [], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: {},
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 11:07:59.836] [INFO] general - development
[2017-09-26 11:08:00.176] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound ],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Object], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 11:09:09.193] [INFO] general - development
[2017-09-26 11:09:09.525] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound ],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Object], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 11:09:42.604] [INFO] general - development
[2017-09-26 11:09:42.966] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound ],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Object], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 11:09:45.816] [INFO] general - development
[2017-09-26 11:09:46.146] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound ],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Object], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 11:10:08.238] [INFO] general - development
[2017-09-26 11:10:08.594] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound ],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Object], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 11:10:13.108] [INFO] general - development
[2017-09-26 11:10:13.457] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound ],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Object], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 13:00:23.707] [INFO] general - development
[2017-09-26 13:00:24.242] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound ],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Object], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 23:24:25.893] [INFO] general - development
[2017-09-26 23:24:29.388] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 23:25:38.442] [INFO] general - development
[2017-09-26 23:25:38.786] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 23:26:06.115] [INFO] general - development
[2017-09-26 23:26:06.501] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 23:27:28.706] [INFO] general - development
[2017-09-26 23:27:29.046] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-09-26 23:27:31.471] [INFO] general - development
[2017-09-26 23:27:31.808] [DEBUG] general - { Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: { '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:44:14.362] [INFO] general - development
[2017-10-01 17:44:14.819] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:44:31.936] [INFO] general - development
[2017-10-01 17:44:32.427] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:49:05.216] [INFO] general - development
[2017-10-01 17:49:05.679] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:51:22.296] [INFO] general - development
[2017-10-01 17:51:22.758] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:51:28.181] [INFO] general - development
[2017-10-01 17:51:28.668] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:52:13.937] [INFO] general - development
[2017-10-01 17:52:14.423] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:52:30.402] [INFO] general - development
[2017-10-01 17:52:30.914] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:53:16.292] [INFO] general - development
[2017-10-01 17:53:16.743] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:53:33.335] [INFO] general - development
[2017-10-01 17:53:33.810] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:53:38.511] [INFO] general - development
[2017-10-01 17:53:38.958] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:53:55.143] [INFO] general - development
[2017-10-01 17:53:55.646] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:54:08.024] [INFO] general - development
[2017-10-01 17:54:08.548] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:55:50.589] [INFO] general - development
[2017-10-01 17:55:51.073] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:56:14.849] [INFO] general - development
[2017-10-01 17:56:15.315] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:57:31.324] [INFO] general - development
[2017-10-01 17:57:31.869] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:58:04.540] [INFO] general - development
[2017-10-01 17:58:05.000] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:58:33.320] [INFO] general - development
[2017-10-01 17:58:33.779] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:58:49.598] [INFO] general - development
[2017-10-01 17:58:50.057] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 17:59:23.626] [INFO] general - development
[2017-10-01 17:59:24.139] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:00:38.122] [INFO] general - development
[2017-10-01 18:00:38.613] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:02:05.808] [INFO] general - development
[2017-10-01 18:02:08.318] [INFO] general - development
[2017-10-01 18:02:08.793] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:02:35.607] [INFO] general - development
[2017-10-01 18:02:36.139] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:03:38.658] [INFO] general - development
[2017-10-01 18:03:39.168] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:05:13.296] [INFO] general - development
[2017-10-01 18:05:13.792] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:05:16.327] [INFO] general - development
[2017-10-01 18:05:16.816] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:06:06.333] [INFO] general - development
[2017-10-01 18:06:06.799] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:06:46.829] [INFO] general - development
[2017-10-01 18:06:47.290] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:06:48.579] [INFO] general - development
[2017-10-01 18:06:49.064] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:08:32.775] [INFO] general - development
[2017-10-01 18:08:33.270] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:10:17.908] [INFO] general - development
[2017-10-01 18:10:18.375] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:10:42.973] [INFO] general - development
[2017-10-01 18:10:43.467] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:10:50.914] [INFO] general - development
[2017-10-01 18:10:51.384] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:10:53.972] [INFO] general - development
[2017-10-01 18:10:54.436] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:11:05.092] [INFO] general - development
[2017-10-01 18:11:05.588] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:11:17.738] [INFO] general - development
[2017-10-01 18:11:18.214] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:11:27.135] [INFO] general - development
[2017-10-01 18:11:27.603] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:12:25.169] [INFO] general - development
[2017-10-01 18:12:25.688] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:13:15.963] [INFO] general - development
[2017-10-01 18:13:16.419] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:14:41.895] [INFO] general - development
[2017-10-01 18:14:42.393] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:16:07.033] [INFO] general - development
[2017-10-01 18:16:07.514] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:16:28.775] [INFO] general - development
[2017-10-01 18:16:29.287] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:17:07.604] [INFO] general - development
[2017-10-01 18:17:08.098] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:17:10.791] [INFO] general - development
[2017-10-01 18:17:11.285] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:17:24.697] [INFO] general - development
[2017-10-01 18:17:25.177] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:18:13.908] [INFO] general - development
[2017-10-01 18:18:14.380] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:18:36.630] [INFO] general - development
[2017-10-01 18:18:37.085] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:18:50.651] [INFO] general - development
[2017-10-01 18:18:51.170] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:18:57.570] [INFO] general - development
[2017-10-01 18:18:58.052] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:19:22.633] [INFO] general - development
[2017-10-01 18:19:23.122] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:26:14.309] [INFO] general - development
[2017-10-01 18:26:14.797] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:26:21.431] [INFO] general - development
[2017-10-01 18:26:21.936] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:29:31.703] [INFO] general - development
[2017-10-01 18:29:32.184] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:29:40.004] [INFO] general - development
[2017-10-01 18:29:40.468] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:29:44.153] [INFO] general - development
[2017-10-01 18:29:44.615] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:30:18.786] [INFO] general - development
[2017-10-01 18:30:19.293] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:30:24.121] [INFO] general - development
[2017-10-01 18:30:24.606] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:30:26.896] [INFO] general - development
[2017-10-01 18:30:27.398] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:30:36.759] [INFO] general - development
[2017-10-01 18:30:37.239] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:31:24.682] [INFO] general - development
[2017-10-01 18:31:25.186] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:31:29.204] [INFO] general - development
[2017-10-01 18:31:29.702] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:31:53.946] [INFO] general - development
[2017-10-01 18:31:54.472] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:32:59.968] [INFO] general - development
[2017-10-01 18:33:00.448] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:33:42.859] [INFO] general - development
[2017-10-01 18:33:43.329] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:34:32.515] [INFO] general - development
[2017-10-01 18:34:33.063] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:35:10.370] [INFO] general - development
[2017-10-01 18:35:10.833] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:35:36.778] [INFO] general - development
[2017-10-01 18:35:37.367] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:36:43.601] [INFO] general - development
[2017-10-01 18:36:44.088] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:37:03.021] [INFO] general - development
[2017-10-01 18:37:03.722] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:37:14.254] [INFO] general - development
[2017-10-01 18:37:14.743] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:37:25.970] [INFO] general - development
[2017-10-01 18:37:26.430] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:38:08.203] [INFO] general - development
[2017-10-01 18:38:08.685] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:38:23.064] [INFO] general - development
[2017-10-01 18:38:23.529] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:39:01.634] [INFO] general - development
[2017-10-01 18:39:02.113] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:39:30.505] [INFO] general - development
[2017-10-01 18:39:31.016] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:39:38.015] [INFO] general - development
[2017-10-01 18:39:38.513] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:39:42.612] [INFO] general - development
[2017-10-01 18:39:43.148] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:39:47.698] [INFO] general - development
[2017-10-01 18:39:48.278] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:41:45.144] [INFO] general - development
[2017-10-01 18:41:45.616] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:42:30.741] [INFO] general - development
[2017-10-01 18:42:31.206] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:42:40.194] [INFO] general - development
[2017-10-01 18:42:40.698] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:42:57.194] [INFO] general - development
[2017-10-01 18:42:57.682] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:44:09.393] [INFO] general - development
[2017-10-01 18:44:09.865] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:44:18.068] [INFO] general - development
[2017-10-01 18:44:18.530] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:45:01.885] [INFO] general - development
[2017-10-01 18:45:02.400] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:45:31.256] [INFO] general - development
[2017-10-01 18:45:31.746] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:45:35.997] [INFO] general - development
[2017-10-01 18:45:36.468] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:46:41.496] [INFO] general - development
[2017-10-01 18:46:41.973] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:47:04.048] [INFO] general - development
[2017-10-01 18:47:04.517] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:47:21.262] [INFO] general - development
[2017-10-01 18:47:21.749] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:47:35.355] [INFO] general - development
[2017-10-01 18:47:35.823] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:47:57.519] [INFO] general - development
[2017-10-01 18:47:57.989] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:51:38.972] [INFO] general - development
[2017-10-01 18:51:39.478] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:52:35.559] [INFO] general - development
[2017-10-01 18:52:36.047] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:52:38.003] [INFO] general - development
[2017-10-01 18:52:38.456] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:55:12.416] [INFO] general - development
[2017-10-01 18:55:12.933] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:56:59.348] [INFO] general - development
[2017-10-01 18:56:59.897] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:58:11.791] [INFO] general - development
[2017-10-01 18:58:12.338] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
[2017-10-01 18:58:28.616] [INFO] general - development
[2017-10-01 18:58:29.132] [DEBUG] general - { User: User,
  Vet: Vet,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: '127.0.0.1',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        username: 'postgres',
        password: 'a748cf4213',
        database: 'egryzonie-development' },
     config: 
      { database: 'egryzonie-development',
        username: 'postgres',
        password: 'a748cf4213',
        host: '127.0.0.1',
        port: 5432,
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Object],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Object], QueryGenerator: [Object] },
     models: { User: User, Vet: Vet },
     modelManager: ModelManager { models: [Array], sequelize: [Object] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Object],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        _onProcessExit: [Function: bound _onProcessExit],
        pool: [Object],
        lib: [Object] },
     importCache: 
      { '/mnt/d/Projekty/egryzonie-server/server/models/user.js': User,
        '/mnt/d/Projekty/egryzonie-server/server/models/vet.js': Vet },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function: where],
     version: '4.11.0',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Object],
        version: '3.5.0',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Object] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     Validator: 
      { version: '8.2.0',
        toDate: [Function: toDate],
        toFloat: [Function: toFloat],
        toInt: [Function: toInt],
        toBoolean: [Function: toBoolean],
        equals: [Function: equals],
        contains: [Function: contains],
        matches: [Function: matches],
        isEmail: [Function: isEmail],
        isURL: [Function: isURL],
        isMACAddress: [Function: isMACAddress],
        isIP: [Function: isIP],
        isFQDN: [Function: isFDQN],
        isBoolean: [Function: isBoolean],
        isAlpha: [Function: isAlpha],
        isAlphanumeric: [Function: isAlphanumeric],
        isNumeric: [Function: isNumeric],
        isLowercase: [Function: isLowercase],
        isUppercase: [Function: isUppercase],
        isAscii: [Function: isAscii],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Function: isVariableWidth],
        isMultibyte: [Function: isMultibyte],
        isSurrogatePair: [Function: isSurrogatePair],
        isInt: [Function: isInt],
        isFloat: [Function: isFloat],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Function: isHexadecimal],
        isDivisibleBy: [Function: isDivisibleBy],
        isHexColor: [Function: isHexColor],
        isISRC: [Function: isISRC],
        isMD5: [Function: isMD5],
        isHash: [Function: isHash],
        isJSON: [Function: isJSON],
        isEmpty: [Function: isEmpty],
        isLength: [Function: isLength],
        isByteLength: [Function: isByteLength],
        isUUID: [Function: isUUID],
        isMongoId: [Function: isMongoId],
        isAfter: [Function: isAfter],
        isBefore: [Function: isBefore],
        isIn: [Function: isIn],
        isCreditCard: [Function: isCreditCard],
        isISIN: [Function: isISIN],
        isISBN: [Function: isISBN],
        isISSN: [Function: isISSN],
        isMobilePhone: [Function: isMobilePhone],
        isPostalCode: [Function],
        isCurrency: [Function: isCurrency],
        isISO8601: [Function: isISO8601],
        isBase64: [Function: isBase64],
        isDataURI: [Function: isDataURI],
        isLatLong: [Function],
        ltrim: [Function: ltrim],
        rtrim: [Function: rtrim],
        trim: [Function: trim],
        escape: [Function: escape],
        unescape: [Function: unescape],
        stripLow: [Function: stripLow],
        whitelist: [Function: whitelist],
        blacklist: [Function: blacklist],
        isWhitelisted: [Function: isWhitelisted],
        normalizeEmail: [Function: normalizeEmail],
        toString: [Function: toString],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Function: isEmpty],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Object], default: [Object] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Object],
        Association: [Object] },
     useInflection: [Function: useInflection],
     replaceHookAliases: [Function: replaceHookAliases],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: [Function: ValidationErrorItem],
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     Sequelize: [Circular],
     default: [Circular] } }
